// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2016 07:51:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IOTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IOTest_vlg_sample_tst(
	in_out,
	io,
	sampler_tx
);
input  in_out;
input [1:0] io;
output sampler_tx;

reg sample;
time current_time;
always @(in_out or io)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IOTest_vlg_check_tst (
	io,
	peaker,
	sampler_rx
);
input [1:0] io;
input [1:0] peaker;
input sampler_rx;

reg [1:0] io_expected;
reg [1:0] peaker_expected;

reg [1:0] io_prev;
reg [1:0] peaker_prev;

reg [1:0] io_expected_prev;
reg [1:0] peaker_expected_prev;

reg [1:0] last_io_exp;
reg [1:0] last_peaker_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	io_prev = io;
	peaker_prev = peaker;
end

// update expected /o prevs

always @(trigger)
begin
	io_expected_prev = io_expected;
	peaker_expected_prev = peaker_expected;
end


// expected peaker[ 1 ]
initial
begin
	peaker_expected[1] = 1'bX;
end 
// expected peaker[ 0 ]
initial
begin
	peaker_expected[0] = 1'bX;
end 
// generate trigger
always @(io_expected or io or peaker_expected or peaker)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected io = %b | expected peaker = %b | ",io_expected_prev,peaker_expected_prev);
	$display("| real io = %b | real peaker = %b | ",io_prev,peaker_prev);
`endif
	if (
		( io_expected_prev[0] !== 1'bx ) && ( io_prev[0] !== io_expected_prev[0] )
		&& ((io_expected_prev[0] !== last_io_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_exp[0] = io_expected_prev[0];
	end
	if (
		( io_expected_prev[1] !== 1'bx ) && ( io_prev[1] !== io_expected_prev[1] )
		&& ((io_expected_prev[1] !== last_io_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_exp[1] = io_expected_prev[1];
	end
	if (
		( peaker_expected_prev[0] !== 1'bx ) && ( peaker_prev[0] !== peaker_expected_prev[0] )
		&& ((peaker_expected_prev[0] !== last_peaker_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port peaker[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", peaker_expected_prev);
		$display ("     Real value = %b", peaker_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_peaker_exp[0] = peaker_expected_prev[0];
	end
	if (
		( peaker_expected_prev[1] !== 1'bx ) && ( peaker_prev[1] !== peaker_expected_prev[1] )
		&& ((peaker_expected_prev[1] !== last_peaker_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port peaker[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", peaker_expected_prev);
		$display ("     Real value = %b", peaker_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_peaker_exp[1] = peaker_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IOTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in_out;
reg [1:0] treg_io;
// wires                                               
wire [1:0] io;
wire [1:0] peaker;

wire sampler;                             

// assign statements (if any)                          
assign io = treg_io;
IOTest i1 (
// port map - connection between master ports and signals/registers   
	.in_out(in_out),
	.io(io),
	.peaker(peaker)
);

// in_out
initial
begin
	in_out = 1'b0;
	in_out = #180000 1'b1;
	in_out = #220000 1'b0;
	in_out = #220000 1'b1;
	in_out = #120000 1'b0;
end 
// io[ 1 ]
initial
begin
	treg_io[1] = 1'bZ;
end 
// io[ 0 ]
initial
begin
	treg_io[0] = 1'bZ;
end 

IOTest_vlg_sample_tst tb_sample (
	.in_out(in_out),
	.io(io),
	.sampler_tx(sampler)
);

IOTest_vlg_check_tst tb_out(
	.io(io),
	.peaker(peaker),
	.sampler_rx(sampler)
);
endmodule

