// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2016 14:57:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lcd_vlg_sample_tst(
	clk,
	data_out_pin,
	start,
	sampler_tx
);
input  clk;
input [7:0] data_out_pin;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_out_pin or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lcd_vlg_check_tst (
	data_out_pin,
	enable_pin,
	power_pin,
	rs_pin,
	rw_pin,
	sampler_rx
);
input [7:0] data_out_pin;
input  enable_pin;
input  power_pin;
input  rs_pin;
input  rw_pin;
input sampler_rx;

reg [7:0] data_out_pin_expected;
reg  enable_pin_expected;
reg  power_pin_expected;
reg  rs_pin_expected;
reg  rw_pin_expected;

reg [7:0] data_out_pin_prev;
reg  enable_pin_prev;
reg  power_pin_prev;
reg  rs_pin_prev;
reg  rw_pin_prev;

reg [7:0] data_out_pin_expected_prev;
reg  enable_pin_expected_prev;
reg  power_pin_expected_prev;
reg  rs_pin_expected_prev;
reg  rw_pin_expected_prev;

reg [7:0] last_data_out_pin_exp;
reg  last_enable_pin_exp;
reg  last_power_pin_exp;
reg  last_rs_pin_exp;
reg  last_rw_pin_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_pin_prev = data_out_pin;
	enable_pin_prev = enable_pin;
	power_pin_prev = power_pin;
	rs_pin_prev = rs_pin;
	rw_pin_prev = rw_pin;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_pin_expected_prev = data_out_pin_expected;
	enable_pin_expected_prev = enable_pin_expected;
	power_pin_expected_prev = power_pin_expected;
	rs_pin_expected_prev = rs_pin_expected;
	rw_pin_expected_prev = rw_pin_expected;
end



// expected enable_pin
initial
begin
	enable_pin_expected = 1'bX;
end 

// expected power_pin
initial
begin
	power_pin_expected = 1'bX;
end 

// expected rs_pin
initial
begin
	rs_pin_expected = 1'bX;
end 

// expected rw_pin
initial
begin
	rw_pin_expected = 1'bX;
end 
// generate trigger
always @(data_out_pin_expected or data_out_pin or enable_pin_expected or enable_pin or power_pin_expected or power_pin or rs_pin_expected or rs_pin or rw_pin_expected or rw_pin)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out_pin = %b | expected enable_pin = %b | expected power_pin = %b | expected rs_pin = %b | expected rw_pin = %b | ",data_out_pin_expected_prev,enable_pin_expected_prev,power_pin_expected_prev,rs_pin_expected_prev,rw_pin_expected_prev);
	$display("| real data_out_pin = %b | real enable_pin = %b | real power_pin = %b | real rs_pin = %b | real rw_pin = %b | ",data_out_pin_prev,enable_pin_prev,power_pin_prev,rs_pin_prev,rw_pin_prev);
`endif
	if (
		( data_out_pin_expected_prev[0] !== 1'bx ) && ( data_out_pin_prev[0] !== data_out_pin_expected_prev[0] )
		&& ((data_out_pin_expected_prev[0] !== last_data_out_pin_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[0] = data_out_pin_expected_prev[0];
	end
	if (
		( data_out_pin_expected_prev[1] !== 1'bx ) && ( data_out_pin_prev[1] !== data_out_pin_expected_prev[1] )
		&& ((data_out_pin_expected_prev[1] !== last_data_out_pin_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[1] = data_out_pin_expected_prev[1];
	end
	if (
		( data_out_pin_expected_prev[2] !== 1'bx ) && ( data_out_pin_prev[2] !== data_out_pin_expected_prev[2] )
		&& ((data_out_pin_expected_prev[2] !== last_data_out_pin_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[2] = data_out_pin_expected_prev[2];
	end
	if (
		( data_out_pin_expected_prev[3] !== 1'bx ) && ( data_out_pin_prev[3] !== data_out_pin_expected_prev[3] )
		&& ((data_out_pin_expected_prev[3] !== last_data_out_pin_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[3] = data_out_pin_expected_prev[3];
	end
	if (
		( data_out_pin_expected_prev[4] !== 1'bx ) && ( data_out_pin_prev[4] !== data_out_pin_expected_prev[4] )
		&& ((data_out_pin_expected_prev[4] !== last_data_out_pin_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[4] = data_out_pin_expected_prev[4];
	end
	if (
		( data_out_pin_expected_prev[5] !== 1'bx ) && ( data_out_pin_prev[5] !== data_out_pin_expected_prev[5] )
		&& ((data_out_pin_expected_prev[5] !== last_data_out_pin_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[5] = data_out_pin_expected_prev[5];
	end
	if (
		( data_out_pin_expected_prev[6] !== 1'bx ) && ( data_out_pin_prev[6] !== data_out_pin_expected_prev[6] )
		&& ((data_out_pin_expected_prev[6] !== last_data_out_pin_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[6] = data_out_pin_expected_prev[6];
	end
	if (
		( data_out_pin_expected_prev[7] !== 1'bx ) && ( data_out_pin_prev[7] !== data_out_pin_expected_prev[7] )
		&& ((data_out_pin_expected_prev[7] !== last_data_out_pin_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_pin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_pin_expected_prev);
		$display ("     Real value = %b", data_out_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_pin_exp[7] = data_out_pin_expected_prev[7];
	end
	if (
		( enable_pin_expected_prev !== 1'bx ) && ( enable_pin_prev !== enable_pin_expected_prev )
		&& ((enable_pin_expected_prev !== last_enable_pin_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_pin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_pin_expected_prev);
		$display ("     Real value = %b", enable_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enable_pin_exp = enable_pin_expected_prev;
	end
	if (
		( power_pin_expected_prev !== 1'bx ) && ( power_pin_prev !== power_pin_expected_prev )
		&& ((power_pin_expected_prev !== last_power_pin_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port power_pin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", power_pin_expected_prev);
		$display ("     Real value = %b", power_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_power_pin_exp = power_pin_expected_prev;
	end
	if (
		( rs_pin_expected_prev !== 1'bx ) && ( rs_pin_prev !== rs_pin_expected_prev )
		&& ((rs_pin_expected_prev !== last_rs_pin_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs_pin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_pin_expected_prev);
		$display ("     Real value = %b", rs_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rs_pin_exp = rs_pin_expected_prev;
	end
	if (
		( rw_pin_expected_prev !== 1'bx ) && ( rw_pin_prev !== rw_pin_expected_prev )
		&& ((rw_pin_expected_prev !== last_rw_pin_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rw_pin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rw_pin_expected_prev);
		$display ("     Real value = %b", rw_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rw_pin_exp = rw_pin_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] treg_data_out_pin;
reg start;
// wires                                               
wire [7:0] data_out_pin;
wire enable_pin;
wire power_pin;
wire rs_pin;
wire rw_pin;

wire sampler;                             

// assign statements (if any)                          
assign data_out_pin = treg_data_out_pin;
Lcd i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_out_pin(data_out_pin),
	.enable_pin(enable_pin),
	.power_pin(power_pin),
	.rs_pin(rs_pin),
	.rw_pin(rw_pin),
	.start(start)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #40000 1'b1;
	clk = #40000 1'b0;
	clk = #40000 1'b1;
	clk = #40000 1'b0;
	clk = #40000 1'b1;
	clk = #40000 1'b0;
	clk = #40000 1'b1;
	clk = #40000 1'b0;
	clk = #40000 1'b1;
	clk = #40000 1'b0;
end 
// data_out_pin[ 7 ]
initial
begin
	treg_data_out_pin[7] = 1'bZ;
end 
// data_out_pin[ 6 ]
initial
begin
	treg_data_out_pin[6] = 1'bZ;
end 
// data_out_pin[ 5 ]
initial
begin
	treg_data_out_pin[5] = 1'bZ;
end 
// data_out_pin[ 4 ]
initial
begin
	treg_data_out_pin[4] = 1'bZ;
end 
// data_out_pin[ 3 ]
initial
begin
	treg_data_out_pin[3] = 1'bZ;
end 
// data_out_pin[ 2 ]
initial
begin
	treg_data_out_pin[2] = 1'bZ;
end 
// data_out_pin[ 1 ]
initial
begin
	treg_data_out_pin[1] = 1'bZ;
end 
// data_out_pin[ 0 ]
initial
begin
	treg_data_out_pin[0] = 1'bZ;
end 

Lcd_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_out_pin(data_out_pin),
	.start(start),
	.sampler_tx(sampler)
);

Lcd_vlg_check_tst tb_out(
	.data_out_pin(data_out_pin),
	.enable_pin(enable_pin),
	.power_pin(power_pin),
	.rs_pin(rs_pin),
	.rw_pin(rw_pin),
	.sampler_rx(sampler)
);
endmodule

